# GitHub Actions Workflow: Build .csproj and Create Release
#
# WHAT THIS DOES:
# 1. Triggers automatically when you push a new tag (e.g., "v1.0.0") to your repository.
# 2. Sets up a fresh Windows environment and builds your project.
# 3. Creates a new, formal GitHub Release corresponding to the tag name.
# 4. Uploads your compiled .exe file as a permanent asset to that release.
#
# HOW TO USE:
# 1. Place this file in '.github/workflows/release.yml' in your repository.
# 2. When you are ready to publish a new version, create and push a tag:
#    git tag v1.0.0
#    git push origin v1.0.0
# 3. The workflow will run, and the .exe will appear under the "Releases"
#    section on your main repository page.

name: Build and Create Release

on:
  push:
    tags:
      - 'v*.*.*' # Triggers the workflow on version tags like v1.0.0, v1.2.3, etc.

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write # This permission is required to create a release

    steps:
    # Step 1: Check out your repository code so the workflow can access it
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Set up MSBuild.
    - name: Add msbuild to path
      uses: microsoft/setup-msbuild@v2

    # Step 3: Restore NuGet packages for the project
    - name: Restore NuGet packages
      run: nuget restore OracleOptimizer/OracleOptimizer.csproj

    # Step 4: Build the project.
    - name: Build project
      run: msbuild.exe OracleOptimizer/OracleOptimizer.csproj /p:Configuration=Release

    # Step 5: Create a GitHub Release and upload the .exe as an asset
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        # The 'files' option points to your compiled executable.
        # This will find the .exe in the build output directory and attach it to the release.
        files: '**/bin/Release/**/*.exe'
