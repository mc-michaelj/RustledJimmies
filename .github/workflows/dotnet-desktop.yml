# GitHub Actions Workflow: Build .csproj and Create Release
#
# WHAT THIS DOES:
# 1. Triggers automatically when you push a new tag (e.g., "v1.0.0").
# 2. Can also be triggered manually from the "Actions" tab.
# 3. If triggered by a tag, it creates a full release with that version number.
# 4. If triggered manually, it creates/updates a "Pre-release" for testing.
# 5. Publishes the entire application as a single, self-contained .exe file.
# 6. Uploads the single .exe file as a permanent asset to the release.
#
# HOW TO USE:
# 1. To create a final release, push a new tag:
#    git tag v1.0.3
#    git push origin v1.0.3
# 2. To create a test build, run the workflow manually.
# 3. On the Releases page, you can now download the single .exe file directly.

name: Build and Create Release

on:
  push:
    tags:
      - 'v*.*.*' # Triggers the workflow on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write # This permission is required to create a release

    steps:
    # Step 1: Check out your repository code so the workflow can access it
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Step 3: Set up .NET SDK
    # This ensures the correct version of the .NET SDK is available.
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Step 4: Check formatting (Optional, but good practice)
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

    # Step 5: Publish the application as a single, self-contained file
    - name: Publish application
      # This single `dotnet publish` command handles restoring dependencies, building, and packaging.
      # It's the modern, recommended way to build for deployment.
      # -c Release: Specifies the Release configuration.
      # --runtime win-x64: Specifies the target OS and architecture, fixing the error.
      # --self-contained true: Includes the .NET runtime in the .exe.
      # /p:PublishSingleFile=true: Bundles the app into one .exe.
      # /p:IncludeAllContentForSelfExtract=true: Forces inclusion of all content, including native DLLs.
      run: >
        dotnet publish OracleOptimizer/OracleOptimizer.csproj 
        -c Release 
        --runtime win-x64 
        --self-contained true 
        /p:PublishSingleFile=true
        /p:IncludeAllContentForSelfExtract=true

    # Step 6: Create a GitHub Release and upload the single .exe file
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        # The 'files' option now points to the single .exe in the publish directory.
        files: 'OracleOptimizer/bin/Release/net8.0-windows/win-x64/publish/OracleOptimizer.exe'
        # If run manually, name the release "Nightly Build". Otherwise, use the tag name.
        name: ${{ github.event_name == 'workflow_dispatch' && 'Nightly Build' || github.ref_name }}
        # If run manually, mark it as a pre-release.
        prerelease: ${{ github.event_name == 'workflow_dispatch' }}
        # If run manually, create/update a tag called "nightly". Otherwise, use the pushed tag.
        tag_name: ${{ github.event_name == 'workflow_dispatch' && 'nightly' || github.ref_name }}
